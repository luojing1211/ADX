#!/usr/bin/env python2.7

_VERSION_ = "0.0.1"

import argparse
import subprocess as sp
import sys
import logging

# log setup
logging.basicConfig(format='[%(levelname)s] %(message)s')
mylog = logging.getLogger()

def parseargs():
    adxargparser = argparse.ArgumentParser(prog="ADX", description="Command line interface to ADX", epilog="ADX v"+_VERSION_)
    subs = adxargparser.add_subparsers(help="Commands", dest='cmd')
    ## logout
    lgroup = subs.add_parser("logout", help="Closes everything and logs out.")
    ## schema
    sgroup = subs.add_parser("schema", help="Prints schema.")
    ## refresh
    rgroup = subs.add_parser("refresh", help="Refreshs database.")
    ## update
    ugroup = subs.add_parser("update", help="Updates database.")
    ## connect
    cgroup = subs.add_parser("connect", help="Connect help")
    addarg = cgroup.add_argument
    addarg("--one-session", action='store_true', default=True, dest='persist', help="Flag to make persist connection.")
    addarg("-n,name", help="Name of the ADX/Project", default='adx', dest='NAME')
    ## db options
    cgroup_subs = cgroup.add_subparsers(help="Interfaces", dest='interface')
    dbcgroup = cgroup_subs.add_parser("mongodb", help="MongoDB interface")
    addarg = dbcgroup.add_argument
    addarg("--connect", help='IP to connect to database.', default='127.0.0.1:12701', metavar='X.X.X.X:P')
    ## tab options
    tabcgroup = cgroup_subs.add_parser("table", help="Astropy Table interface")
    addarg = tabcgroup.add_argument
    addarg("--tabpath", help="Table path.", default='.')
    ## query
    qgroup = subs.add_parser('query',help="Query help")
    addarg = qgroup.add_argument
    addarg("--par", help="Parameter to query")
    addarg("--cond", help="Condition")
    addarg("--exec", help="Execute afer finding")
    addarg("--out", help="Output filepaths")
    addarg("--explain", help="Explain query")
    addarg("--absolute", action='store_true', help="Return absolute paths")
    ####
    return adxargparser.parse_args()

def main():
    opts = parseargs()
    if opts.cmd == 'schema':
        print "requested schema"
    elif opts.cmd == 'refresh':
        print "requested refresh"
    elif opts.cmd == 'update':
        print "requested update"
    elif opts.cmd == 'query':
        print "requested query"
    elif opts.cmd == 'logout':
        print "requested logout"

if __name__ == '__main__':
    main()
